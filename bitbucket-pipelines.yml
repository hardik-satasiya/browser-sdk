image: node:carbon

definitions:
  steps:

    - step: &Audit-Step
        name: Audit NPM vulnerabilities
        image:
          name: oltregistry.azurecr.io/tools/npm-audit-ci:latest
          username: $REGISTRY_USER
          password: $REGISTRY_PASSWORD
        script:
          - echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
          - npm ci
          - /app/bin/npm-audit-ci -m
        caches:
          - node

    - step: &Build-Step
        name: Build
        script:
          - npm ci
          - npm run build
        caches:
          - node
        artifacts:
          - dist/**

    - step: &Test-Step
        name: Test
        script:
          - npm ci
          - npm run lint
          - npm run test
        caches:
          - node

    - step: &License-Step
        name: License report
        script:
          - npm ci
          - npm run license-report
        caches:
          - node

    - step: &Build-Docs-Container
        name: Build docs container
        script:
          - npm ci
          - npm run build:docs
          - docker build -t ${DOCKER_REPO}/${BITBUCKET_REPO_SLUG}:${BITBUCKET_BRANCH}_${BITBUCKET_BUILD_NUMBER} .
          - docker save --output docs-image.docker ${DOCKER_REPO}/${BITBUCKET_REPO_SLUG}:${BITBUCKET_BRANCH}_${BITBUCKET_BUILD_NUMBER}
        services:
          - docker
        caches:
          - docker
          - node
        artifacts:
          - docs-image.docker

    - step: &Upload-Docs-Container
        name: Upload docs container
        script:
          - docker load --input ./docs-image.docker
          - echo ${REGISTRY_PASSWORD} | docker login --username ${REGISTRY_USER} --password-stdin ${DOCKER_REPO}
          - docker push ${DOCKER_REPO}/${BITBUCKET_REPO_SLUG}:${BITBUCKET_BRANCH}_${BITBUCKET_BUILD_NUMBER}
        services:
          - docker
        caches:
          - docker
          - node

    - step: &Lint-Helm-Config
        name: Lint the helm config
        script:
          - helm lint -f deploy/${BITBUCKET_REPO_SLUG}/values-dev.yaml --set image.tag=LINT deploy/${BITBUCKET_REPO_SLUG}/
        image: dtzar/helm-kubectl:2.9.0

pipelines:

  default:
    - step: *Audit-Step
    - step: *Build-Step
    - step: *Test-Step
    - step: *License-Step
    - step: *Build-Docs-Container

  tags:
    '*.*.*':
      - step: *Audit-Step
      - step: *Build-Step
      - step: *Test-Step
      - step: *License-Step
      - step: *Build-Docs-Container
      - step:
          name: Publish package on NPM
          script:
            - npm ci
            - npm build
            - npm version --no-git-tag-version ${BITBUCKET_TAG}
            - echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN_PUBLISH}" > .npmrc
            - npm publish
          caches:
            - node
      - step: *Upload-Docs-Container
      - step: *Lint-Helm-Config
      - step:
          name: Deploy docs to int
          image: dtzar/helm-kubectl:2.9.0
          deployment: test
          trigger: manual
          script:
            # Configure kubectl to give it access to the int cluster
            - echo $NINT_K8S_CLUSTER_CA | base64 -d > ca.pem
            - kubectl config set-cluster my-cluster --certificate-authority=ca.pem --server=${NINT_K8S_CLUSTER_URL} --embed-certs
            - kubectl config set-context my-context --cluster=my-cluster --user=${NINT_K8S_CLUSTER_USER}
            - kubectl config set-credentials ${NINT_K8S_CLUSTER_USER} --token=${NINT_K8S_CLUSTER_TOKEN}
            - kubectl config use-context my-context
            # Update int cluster to the the image from this build
            - helm upgrade --namespace portal -i ${BITBUCKET_REPO_SLUG} deploy/${BITBUCKET_REPO_SLUG}/ --set image.tag="${BITBUCKET_BRANCH}_${BITBUCKET_BUILD_NUMBER}" -f deploy/${BITBUCKET_REPO_SLUG}/values-int.yaml
      - step:
          name: Deploy docs to preview
          image: dtzar/helm-kubectl:2.9.0
          deployment: staging
          trigger: manual
          script:
            # Configure kubectl to give it access to the preview cluster
            - echo $NPREVIEW_K8S_CLUSTER_CA | base64 -d > ca.pem
            - kubectl config set-cluster my-cluster --certificate-authority=ca.pem --server=${NPREVIEW_K8S_CLUSTER_URL} --embed-certs
            - kubectl config set-context my-context --cluster=my-cluster --user=${NPREVIEW_K8S_CLUSTER_USER}
            - kubectl config set-credentials ${NPREVIEW_K8S_CLUSTER_USER} --token=${NPREVIEW_K8S_CLUSTER_TOKEN}
            - kubectl config use-context my-context
            # Update preview cluster to the the image from this build
            - helm upgrade --namespace portal -i ${BITBUCKET_REPO_SLUG} deploy/${BITBUCKET_REPO_SLUG}/ --set image.tag="${BITBUCKET_BRANCH}_${BITBUCKET_BUILD_NUMBER}" -f deploy/${BITBUCKET_REPO_SLUG}/values-preview.yaml
      - step:
          name: Deploy docs to production
          image: dtzar/helm-kubectl:2.9.0
          deployment: production
          trigger: manual
          script:
            # Configure kubectl to give it access to the production cluster
            - echo $PROD_K8S_CLUSTER_CA | base64 -d > ca.pem
            - kubectl config set-cluster my-cluster --certificate-authority=ca.pem --server=${PROD_K8S_CLUSTER_URL} --embed-certs
            - kubectl config set-context my-context --cluster=my-cluster --user=${PROD_K8S_CLUSTER_USER}
            - kubectl config set-credentials ${PROD_K8S_CLUSTER_USER} --token=${PROD_K8S_CLUSTER_TOKEN}
            - kubectl config use-context my-context
            # Update production cluster to the the image from this build
            - helm upgrade --namespace portal -i ${BITBUCKET_REPO_SLUG} deploy/${BITBUCKET_REPO_SLUG}/ --set image.tag="${BITBUCKET_BRANCH}_${BITBUCKET_BUILD_NUMBER}" -f deploy/${BITBUCKET_REPO_SLUG}/values-prod.yaml

  branches:
    master:
      - step: *Audit-Step
      - step: *Build-Step
      - step: *Test-Step
      - step: *License-Step
      - step: *Build-Docs-Container
      - step: *Upload-Docs-Container
      - step: *Lint-Helm-Config
      - step:
          name: Deploy docs to dev
          script:
            # Configure kubectl to give it access to the dev cluster
            - echo $NDEV_K8S_CLUSTER_CA | base64 -d > ca.pem
            - kubectl config set-cluster my-cluster --certificate-authority=ca.pem --server=${NDEV_K8S_CLUSTER_URL} --embed-certs
            - kubectl config set-context my-context --cluster=my-cluster --user=${NDEV_K8S_CLUSTER_USER}
            - kubectl config set-credentials ${NDEV_K8S_CLUSTER_USER} --token=${NDEV_K8S_CLUSTER_TOKEN}
            - kubectl config use-context my-context
            # Update NDEV cluster to the the image from this build
            - helm upgrade --namespace portal -i ${BITBUCKET_REPO_SLUG} deploy/${BITBUCKET_REPO_SLUG}/ --set image.tag="${BITBUCKET_BRANCH}_${BITBUCKET_BUILD_NUMBER}" -f deploy/${BITBUCKET_REPO_SLUG}/values-dev.yaml
          image: dtzar/helm-kubectl:2.9.0


